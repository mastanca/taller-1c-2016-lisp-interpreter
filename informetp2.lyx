#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Informe de Trabajo Práctico Nº 2
\end_layout

\begin_layout Standard
\align center
75.42 Taller de Programación I 
\end_layout

\begin_layout Standard
\align center
Cátedra Veiga
\end_layout

\begin_layout Standard
\align center
Facultad de Ingeniera - UBA
\end_layout

\begin_layout Standard
\align center
Autor: Martín Stancanelli
\end_layout

\begin_layout Standard
\align center
Padrón: 95188
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Objetivo
\end_layout

\begin_layout Standard
El objetivo de este trabajo practico fue la implementación de un compilador
 de LISP con multithreading, utilizando la librería pthread, y aplicando
 conocimientos sobre programación orientada a objetos.
\end_layout

\begin_layout Section*
Configuración del entorno
\end_layout

\begin_layout Standard
El entorno de trabajo elegido para la realización del trabajo practico fue
 una PC con SO Linux Mint 17.3 y compilador gcc 4.8 configurado para utilizar
 el estándar de C++98 y la librería pthread.
 
\end_layout

\begin_layout Section*
Explicación de enunciado
\end_layout

\begin_layout Standard
El trabajo consiste en realizar un compilador de LISP que permita enviar
 instrucciones de LISP por la entrada estándar, hacer el correspondiente
 análisis sintáctico y semántico, y ejecutarlas.
 Como novedad se incorpora la capacidad de realizar el proceso de compilación
 en paralelo, osea con la utilización de threads.
 
\begin_inset Newline newline
\end_inset

El programa parseara y compilara linea a linea.
 En caso de encontrar una expresión 
\emph on
Sync
\emph default
 esperara a los threads que estén ejecutándose en ese momento para continuar.
 Se repite el proceso hasta que se encuentra el fin de archivo.
\end_layout

\begin_layout Section*
Desarrollo
\end_layout

\begin_layout Standard
La parte mas interesante en términos de diseño del trabajo practico es la
 estructura de clases de las expresiones y funciones de LISP.
 En un principio se encaro el trabajo con un enfoque bottom-up, generando
 las clases de funciones de mas bajo nivel (
\emph on
Sum, Divide
\emph default
, etc.).
 Luego, al ver la complejidad de la situación y la necesidad de implementar
 el parser recursivo de la solución que finalmente se adopto, fue necesario
 tomar un enfoque mas global, es decir, empezar por planificar el manejo
 de 
\emph on
Expressions 
\emph default
como algo general y luego una vez que esto funcionase si especificar el
 modelo hacia abajo.
 
\end_layout

\begin_layout Standard
Entonces, se creo la clase 
\emph on
Expression
\emph default
 y se modeló todo el parser con esta clase.
 Luego se creo la clase 
\emph on
Constant
\emph default
 y una función simple como 
\emph on
Sum
\emph default
, que permitieran probar parseos de lineas simples.
 Una vez resuelto este problema y al notar que había funciones que compartían
 varias características con la función 
\emph on
Sum
\emph default
 se creo la clase 
\emph on
Function
\emph default
.
 Como existe la necesidad de manejar todo en forma general se hizo heredar
 a las clases 
\emph on
Function
\emph default
 y 
\emph on
Constant
\emph default
 de la clase virtual 
\emph on
Expression
\emph default
.
 Esto ultimo permite que el parser solo maneje 
\emph on
Expressions
\emph default
 y luego cada una de ellas a través del polimorfismo sepa como evaluarse.
\end_layout

\begin_layout Standard
Se incluye un diagrama de clases 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Diagrama-de-estados"

\end_inset

 explicando la estructura final del modelo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename diagrama_clases.png
	width 80page%
	height 70pheight%
	keepAspectRatio
	rotateAngle 90
	groupId common_image

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de clases
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-estados"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Conclusión
\end_layout

\begin_layout Standard
Este trabajo necesitó de la utilización de conocimientos bastante variados
 y complejos.
 Que la solución final propuesta utilice recursividad le agrega una complejidad
 considerable, por el hecho de que esta hace mas difícil el seguimiento
 de la elaboración del código, por ejemplo al querer debuggear las estructuras
 recursivas que se generan.
 No obstante, una vez resuelto el problema recursivo, el modelado de las
 funciones salio de forma natural y la estructura que se genero permitía
 que agregar nuevas funciones el programa no llevara mas de unos pocos minutos.
 
\begin_inset Newline newline
\end_inset

Finalmente se implemento la parte de multithreading.
 Este era un conocimiento nuevo, el cual tuvo que ser debatido con otros
 compañeros del curso para lograr entenderlo del todo.
 Pero una vez que la idea general estaba pulida no presento extrema complejidad.
\end_layout

\end_body
\end_document
